generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String
  lastName  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  questions     Question[]     @relation("UserQuestions")
  disciplines   Discipline[]   @relation("UserDisciplines")
  questionBanks QuestionBank[] @relation("UserQuestionBanks")
  exams         Exam[]         @relation("UserExams")
}

enum QuestionType {
  OBJ
  SUB
}

model Question {
  id           String       @id @default(uuid())
  text         String
  questionType QuestionType
  createdAt    DateTime     @default(now())

  creatorId String
  creator   User   @relation("UserQuestions", fields: [creatorId], references: [id], onDelete: Cascade)

  alternatives        Alternative[]
  questionDisciplines QuestionDiscipline[]   @relation("QuestionToDiscipline")
  questionBanks       QuestionBankQuestion[] @relation("QuestionBankToQuestion")
  exams               ExamQuestion[]         @relation("ExamToQuestion")
}

model Alternative {
  id         String   @id @default(uuid())
  content    String
  correct    Boolean  @default(false)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Discipline {
  id                  String               @id @default(uuid())
  name                String
  creatorId           String
  creator             User                 @relation("UserDisciplines", fields: [creatorId], references: [id], onDelete: Cascade)
  questionDisciplines QuestionDiscipline[] @relation("QuestionToDiscipline")

  questionBankDisciplines QuestionBankDiscipline[] @relation("BankToDisciplines")
}

model QuestionDiscipline {
  questionId   String
  disciplineId String
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade, name: "QuestionToDiscipline")
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade, name: "QuestionToDiscipline")

  @@id([questionId, disciplineId])
}

model QuestionBank {
  id                     String                  @id @default(uuid())
  name                   String
  description            String?
  creatorId              String
  creator                User                    @relation("UserQuestionBanks", fields: [creatorId], references: [id], onDelete: Cascade)
  questions              QuestionBankQuestion[]  @relation("QuestionBankToQuestion")
  questionBankDisciplines QuestionBankDiscipline[] @relation("BankToDisciplines")
  exams                  Exam[]                  @relation("ExamToQuestionBank")
  createdAt              DateTime                @default(now())
}

model QuestionBankQuestion {
  questionBankId String
  questionId     String
  questionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onDelete: Cascade, name: "QuestionBankToQuestion")
  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade, name: "QuestionBankToQuestion")

  @@id([questionBankId, questionId])
}

model QuestionBankDiscipline {
  id             String       @id @default(uuid())
  questionBankId String
  disciplineId   String
  isPredominant  Boolean      @default(false)

  questionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onDelete: Cascade, name: "BankToDisciplines")
  discipline     Discipline   @relation(fields: [disciplineId], references: [id], onDelete: Cascade, name: "BankToDisciplines")

  @@unique([questionBankId, disciplineId])
}

model Exam {
  id            String     @id @default(uuid())
  name          String
  description   String?
  creatorId     String
  creator       User       @relation("UserExams", fields: [creatorId], references: [id], onDelete: Cascade)
  questions     ExamQuestion[] @relation("ExamToQuestion")
  questionBankId String?
  questionBank  QuestionBank? @relation(fields: [questionBankId], references: [id], onDelete: Cascade, name: "ExamToQuestionBank")
  createdAt     DateTime   @default(now())
}

model ExamQuestion {
  examId     String
  questionId String
  exam       Exam      @relation(fields: [examId], references: [id], onDelete: Cascade, name: "ExamToQuestion")
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade, name: "ExamToQuestion")

  @@id([examId, questionId])
}
